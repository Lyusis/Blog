import{_ as s,c as i,o as a,V as n}from"./chunks/framework.pRwbWk_8.js";const E=JSON.parse('{"title":"innodb数据库","description":"","frontmatter":{},"headers":[],"relativePath":"innodb数据库.md","filePath":"innodb数据库.md"}'),t={name:"innodb数据库.md"},l=n('<h1 id="innodb数据库" tabindex="-1">innodb数据库 <a class="header-anchor" href="#innodb数据库" aria-label="Permalink to &quot;innodb数据库&quot;">​</a></h1><h2 id="锁机制" tabindex="-1">锁机制 <a class="header-anchor" href="#锁机制" aria-label="Permalink to &quot;锁机制&quot;">​</a></h2><h3 id="记录锁-record-locks" tabindex="-1">记录锁(Record Locks) <a class="header-anchor" href="#记录锁-record-locks" aria-label="Permalink to &quot;记录锁(Record Locks)&quot;">​</a></h3><p>记录锁是 封锁记录，<strong>记录锁也叫行锁</strong>，例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `test`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>它会在 id=1 的记录上加上记录锁，以阻止其他事务插入，更新，删除 id=1 这一行。</p><p>通过记录锁可以防止脏读。</p><h3 id="间隙锁-gap-locks" tabindex="-1">间隙锁(Gap Locks) <a class="header-anchor" href="#间隙锁-gap-locks" aria-label="Permalink to &quot;间隙锁(Gap Locks)&quot;">​</a></h3><p><strong>间隙锁是封锁索引记录中的间隔</strong>，或者第一条索引记录之前的范围，又或者最后一条索引记录之后的范围。</p><p>产生间隙锁的条件 ( RR事务隔离级别下 ) :</p><ol><li>使用普通索引锁定</li><li>使用多列唯一索引</li><li>使用唯一索引锁定多行记录</li></ol><p>以上情况，都会产生间隙锁</p><blockquote><p>对于使用唯一索引来搜索并给某一行记录加锁的语句，不会产生间隙锁。( 这不包括搜索条件仅包括多列唯一索引的一些列的情况；在这种情况下，会产生间隙锁。) 例如，如果id列具有唯一索引，则下面的语句仅对具有id值100的行使用记录锁，并不会产生间隙锁：</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这条语句，就只会产生记录锁，不会产生间隙锁。</p><p><strong>打开间隙锁设置</strong></p><p>首先查看 innodb_locks_unsafe_for_binlog 是否禁用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_locks_unsafe_for_binlog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>innodb_locks_unsafe_for_binlog：默认值为OFF，即启用间隙锁。因为此参数是只读模式，如果想要禁用间隙锁，需要修改 my.cnf（windows是my.ini） 重新启动才行。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 在 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">my</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cnf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 里面的[mysqld]添加</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">innodb_locks_unsafe_for_binlog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div>',20),e=[l];function h(p,k,o,d,r,c){return a(),i("div",null,e)}const y=s(t,[["render",h]]);export{E as __pageData,y as default};
