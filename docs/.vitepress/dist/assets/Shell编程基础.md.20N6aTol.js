import{_ as t,c as s,o as i,V as a}from"./chunks/framework.pRwbWk_8.js";const y=JSON.parse('{"title":"Shell编程基础","description":"","frontmatter":{},"headers":[],"relativePath":"Shell编程基础.md","filePath":"Shell编程基础.md"}'),e={name:"Shell编程基础.md"},d=a(`<h1 id="shell编程基础" tabindex="-1">Shell编程基础 <a class="header-anchor" href="#shell编程基础" aria-label="Permalink to &quot;Shell编程基础&quot;">​</a></h1><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="自定义变量" tabindex="-1">自定义变量 <a class="header-anchor" href="#自定义变量" aria-label="Permalink to &quot;自定义变量&quot;">​</a></h3><ol><li>变量是由任何字母、数字、和下划线组成的字符串, 且不能以数字开头.</li><li>区分字母大小写, 例如Var1和var1是不同的</li><li>变量、等号、值中间不能出现任何空格</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $var1</span></span></code></pre></div><h3 id="位置参数变量" tabindex="-1">位置参数变量 <a class="header-anchor" href="#位置参数变量" aria-label="Permalink to &quot;位置参数变量&quot;">​</a></h3><ol><li><code>$n</code>: n为数字, $0代表脚本本身, <code>$1</code>~<code>$9</code>代表第1~9个参数, 10以上的参数需要用大括号表示, 如<code>\${10}</code></li><li><code>$@</code>: 代表命令行所有参数, 但是每个参数区别对待</li><li><code>$*</code>: 代表命令行所有参数, 所有参数视为一个整体</li><li><code>$#</code>: 参数个数</li><li><code>$$</code>: 存放当前shell的进程号</li></ol><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h3><ol><li>简介: Linux是一个多租户的操作系统, 针对不同的用户都会有一个专有的运行环境, 不同的专有环境就是一主默认环境变量的组合.</li><li>对所有用户生效的环境变量: /etc/profile</li><li>对特定用户生效的环境变量: ~/.bashrc 或者 ~/.bash_profile</li><li>临时有效的环境变量: 脚本或命令行使用export</li><li>常用环境变量</li></ol><table><thead><tr><th style="text-align:left;">环境变量</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>PATH</code></td><td style="text-align:left;">命令搜索的路径</td></tr><tr><td style="text-align:left;"><code>HOME</code></td><td style="text-align:left;">用户家目录的路径</td></tr><tr><td style="text-align:left;"><code>LOGNAME</code></td><td style="text-align:left;">用户登录名</td></tr><tr><td style="text-align:left;"><code>PWD</code></td><td style="text-align:left;">当前所在路径</td></tr><tr><td style="text-align:left;"><code>HISTFILE</code></td><td style="text-align:left;">历史命令的保存文件</td></tr><tr><td style="text-align:left;"><code>HISTSIZE</code></td><td style="text-align:left;">历史命令保存的最大行数</td></tr><tr><td style="text-align:left;"><code>HOSTNAME</code></td><td style="text-align:left;">主机名</td></tr><tr><td style="text-align:left;"><code>SHELL</code></td><td style="text-align:left;">用户当前使用的SHELL</td></tr><tr><td style="text-align:left;"><code>PS1</code></td><td style="text-align:left;">一级命令提示符</td></tr><tr><td style="text-align:left;"><code>TMOUT</code></td><td style="text-align:left;">用户和系统交互过程的超时值</td></tr><tr><td style="text-align:left;"><code>IFS</code></td><td style="text-align:left;">系统输入分隔符</td></tr><tr><td style="text-align:left;"><code>OFS</code></td><td style="text-align:left;">系统输出分割符</td></tr></tbody></table><h3 id="全局变量和局部变量" tabindex="-1">全局变量和局部变量 <a class="header-anchor" href="#全局变量和局部变量" aria-label="Permalink to &quot;全局变量和局部变量&quot;">​</a></h3><ol><li>不做特殊声明, shell中的变量默认为全局变量. (在大型脚本程序中慎用全局变量)</li><li>定义局部变量时使用<code>local</code>关键字</li><li>函数内和函数外存在同名变量时, 函数内变量会覆盖函数外变量</li></ol><h3 id="管道" tabindex="-1">管道 <a class="header-anchor" href="#管道" aria-label="Permalink to &quot;管道&quot;">​</a></h3><p><code>|</code>符号即为管道, 意为将前一个命令的结果传递给后续命令, 可以连续传递</p><p>从某种意义上来说, 是重定向的一种实现</p><h3 id="退出状态码" tabindex="-1">退出状态码 <a class="header-anchor" href="#退出状态码" aria-label="Permalink to &quot;退出状态码&quot;">​</a></h3><ol><li>所有的shell命令都是使用退出状态码来告知shell它已执行完毕</li><li>退出状态码是一个0~255的整数值</li><li>Linux提供了一个<code>$?</code>来捕获退出状态码的值, 重点在于: 0代表命令执行成功, 非0代表命令执行失败</li></ol><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>命令成功结束</td></tr><tr><td>1</td><td>一般性未知错误</td></tr><tr><td>2</td><td>不适合的shell命令</td></tr><tr><td>126</td><td>命令不可执行</td></tr><tr><td>127</td><td>没找到命令</td></tr><tr><td>128</td><td>无效的退出参数</td></tr><tr><td>128+x</td><td>与Linux信号x相关的严重错误</td></tr><tr><td>130</td><td>通过Ctrl+C终止的命令</td></tr><tr><td>255</td><td>正常范围之外的退出码</td></tr></tbody></table><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $description</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.md </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $line ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;已存在文件, 请确认&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以上的代码并不会因为exit 1 而直接退出, 因为包裹在了while语句中, 相当于一个子shell</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果需要确实地退出, 需要在外部再做一次判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h3 id="变量替换" tabindex="-1">变量替换 <a class="header-anchor" href="#变量替换" aria-label="Permalink to &quot;变量替换&quot;">​</a></h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>\${变量名#匹配规则}</code></td><td>从变量开头进行规则匹配, 将符合最短的数据删除</td></tr><tr><td><code>\${变量名##匹配规则}</code></td><td>从变量开头进行规则匹配, 将符合最长的数据删除</td></tr><tr><td><code>\${变量名%匹配规则}</code></td><td>从变量尾部进行规则匹配, 将符合最短的数据删除</td></tr><tr><td><code>\${变量名%%匹配规则}</code></td><td>从变量尾部进行规则匹配, 将符合最长的数据删除</td></tr><tr><td><code>\${变量名/旧字符串/新字符串}</code></td><td>变量内容符合旧字符串, 则第一个旧字符串会被新字符串取代</td></tr><tr><td><code>\${变量名//旧字符串/新字符串}</code></td><td>变量内容符合旧字符串,, 则全部的旧字符串会被新字符串取代</td></tr></tbody></table><h3 id="变量测试" tabindex="-1">变量测试 <a class="header-anchor" href="#变量测试" aria-label="Permalink to &quot;变量测试&quot;">​</a></h3><p><strong>配置:</strong> 变量声明</p><table><thead><tr><th>变量配置方式</th><th>str没有配置</th><th>str为空字符串</th><th>str已配置且非空</th></tr></thead><tbody><tr><td><code>var=\${str-expr}</code></td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td><code>var=\${str:-expr}</code></td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr><tr><td><code>var=\${str+expr}</code></td><td>var=</td><td>var=expr</td><td>var=expr</td></tr><tr><td><code>var=\${str:+expr}</code></td><td>var=</td><td>var=</td><td>var=expr</td></tr><tr><td><code>var=\${str=expr}</code></td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td><code>var={str:=expr}</code></td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr></tbody></table><h3 id="字符串处理" tabindex="-1">字符串处理 <a class="header-anchor" href="#字符串处理" aria-label="Permalink to &quot;字符串处理&quot;">​</a></h3><h4 id="计算字符串长度" tabindex="-1">计算字符串长度 <a class="header-anchor" href="#计算字符串长度" aria-label="Permalink to &quot;计算字符串长度&quot;">​</a></h4><ol><li>方法一: <code>\${#string}</code></li><li>方法二: <code>expr length &quot;$string&quot;</code>, string有空格, 则必须加双引号</li></ol><h4 id="获取子串信息" tabindex="-1">获取子串信息 <a class="header-anchor" href="#获取子串信息" aria-label="Permalink to &quot;获取子串信息&quot;">​</a></h4><ol><li><p>抓取子串第一个字符数字串出现的位置: <code>expr index $string $substring</code></p></li><li><p>计算子串长度, 必须从头开始匹配: <code>expr match $string substr</code></p></li><li><p>抽取子串(<code>$</code>符号命令下标从0开始, <code>expr</code>命令下标从1开始)</p></li></ol><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>\${string:position}</code></td><td>从string中的position开始</td></tr><tr><td><code>\${string:position:length}</code></td><td>从position开始, 匹配长度为length</td></tr><tr><td><code>\${string: -position}</code></td><td>从右边开始匹配</td></tr><tr><td><code>\${string: (position)}</code></td><td>从左边开始匹配</td></tr><tr><td><code>expr substr $string $position $length</code></td><td>从position开始, 匹配长度为length</td></tr></tbody></table><h3 id="命令替换" tabindex="-1">命令替换 <a class="header-anchor" href="#命令替换" aria-label="Permalink to &quot;命令替换&quot;">​</a></h3><ol><li>在脚本的变量位置中执行复杂命令</li><li>方法一: \`\`\`\`\`command\` \`\`\`\`</li><li>方法二: <code>$(command)</code></li></ol><h3 id="读取输入" tabindex="-1">读取输入 <a class="header-anchor" href="#读取输入" aria-label="Permalink to &quot;读取输入&quot;">​</a></h3><ol><li><code>read -? var</code>命令可以读取输入值, 并储存在var中</li><li><code>-?</code>: <ol><li>-d : 表示delimiter, 即定界符, 一般情况下是以IFS为参数的间隔, 但是通过-d, 我们可以定义一直读到出现执行的字符位置.例如read –d madfds value, 读到有m的字符的时候就不在继续向后读, 例如输入为 hello m, 有效值为&quot;hello”, 请注意m前面的空格等会被删除.这种方式可以输入多个字符串, 例如定义&quot;.”作为结符号等等</li><li>-e : 只用于互相交互的脚本, 它将readline用于收集输入行.读到这几句话不太明白什么意思, 先跳过.</li><li>-n : 用于限定最多可以有多少字符可以作为有效读入.</li><li>-p : 用于给出提示符, <code>read –p &#39;… my promt?&#39; value</code></li><li>-r : 在参数输入中, 我们可以使用<code>/</code>表示没有输入完, 换行继续输入, 如果我们需要行最后的’/’作为有效的字符, 可以通过-r来进行. 此外在输入字符中, 我们希望/n这类特殊字符生效, 也应采用-r选项.</li><li>-s : 对于一些特殊的符号, 例如箭头号, 不将他们在terminal上打印, 例如read –s key, 我们按光标, 在回车之后, 如果我们要求显示, 即echo, 光标向上, 如果不使用-s, 在输入的时候, 输入处显示^[[A, 即在terminal上 打印, 之后如果要求echo, 光标会上移.</li><li>-t : 用于表示等待输入的时间, 单位为秒, 等待时间超过, 将继续执行后面的脚本, 注意不作为null输入, 参数将保留原有的值.</li></ol></li></ol><h3 id="有类型变量" tabindex="-1">有类型变量 <a class="header-anchor" href="#有类型变量" aria-label="Permalink to &quot;有类型变量&quot;">​</a></h3><p>declare命令和typeset命令, 两者等价, 都是用来定义变量类型的</p><p><strong>declare命令参数表</strong></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>将变量设为只读</td></tr><tr><td>-i</td><td>将变量设为整数</td></tr><tr><td>-a</td><td>将变量定义为数组</td></tr><tr><td>-f</td><td>显示此脚本前定义过的所有函数及内容</td></tr><tr><td>-F</td><td>仅显示此脚本前定义过的函数名</td></tr><tr><td>-x</td><td>将变量声明为环境变量</td></tr></tbody></table><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><ol><li>使用<code>@</code>或<code>*</code>可以获取数组中的所有元素, <code>\${array[@]}</code></li><li><code>\${#array[@]}</code>可以获取数组的长度</li><li><code>unset array[i]</code>删除元素 <code>unset array</code>清空数组</li><li><code>\${array[@]:a:b}</code>显示数组数组下标索引从a开始到b的元素, 不包括b</li><li><code>\${array[@]/an/An}</code>将数组中所有包含an的子串替换为AN</li><li>数组遍历</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${array[@]}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $v</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="数学运算" tabindex="-1">数学运算 <a class="header-anchor" href="#数学运算" aria-label="Permalink to &quot;数学运算&quot;">​</a></h2><h3 id="双括号" tabindex="-1">双括号 <code>(())</code> <a class="header-anchor" href="#双括号" aria-label="Permalink to &quot;双括号 \`(())\`&quot;">​</a></h3><p>使用双括号可以进行算数运算, 可以写类C语言的运算表达式</p><p>可用运算符: <code>value++</code> <code>value--</code> <code>++value</code> <code>--value</code> <code>!</code> <code>==</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>&amp;&amp;</code> <code>||</code></p><p><strong>注意事项</strong>:</p><ol><li>双括号结构中, 变量名引用可以加$, 也可以不加</li><li>运算符前后可以有空格, 也可以没有</li><li>可以用于if、for、while等循环控制结构中</li><li>多个运算符使用逗号分<code>((a = a + 1, b = b -1))</code></li><li>不支持浮点型</li></ol><h3 id="双方括号" tabindex="-1">双方括号 <code>[[]]</code> <a class="header-anchor" href="#双方括号" aria-label="Permalink to &quot;双方括号 \`[[]]\`&quot;">​</a></h3><p>支持正则表达式, 可以使用<code>=~</code>来检测字符串是否符合某个正则表达式</p><p>用法为: <code>[[ str =~ regex ]]</code>其中, str 表示字符串, regex 表示正则表达式</p><p><strong>注意事项</strong></p><ol><li>比较数字需要使用 -eq、-gt 等选项, 推荐使用<code>(())</code>进行整数值计算</li><li>双方括号结构中, 变量名引用必须加$</li><li><code>[[</code>后面必须要空格, <code>]]</code>前面也必须要空格</li></ol><h3 id="expr" tabindex="-1">expr <a class="header-anchor" href="#expr" aria-label="Permalink to &quot;expr&quot;">​</a></h3><ol><li><p>语法: <code>expr $num1 operator $num2</code></p></li><li><p>操作符对照表</p></li></ol><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>\`num1</td><td>num2\`</td></tr><tr><td><code>num1 &amp; num2</code></td><td>num1不为空且非0, 返回num1; 否则返回0</td></tr><tr><td><code>num1 &lt; &lt;= = != &gt; &gt;= num2</code></td><td>num1 operator num2, 符合返回1; 否则返回0</td></tr><tr><td><code>num1 + - * / % num2</code></td><td>普通数值运算</td></tr></tbody></table><p><strong>注:</strong> 大多数时候需要<code>\\</code>进行转义, 只能精确到整数, 对浮点数进行计算会报错</p><h3 id="bc" tabindex="-1">bc <a class="header-anchor" href="#bc" aria-label="Permalink to &quot;bc&quot;">​</a></h3><ol><li>bc是bash内建的运算器, 支持浮点运算，内建变量scale可以设置小数位, 默认为0. bc可以识别（浮点）数字，变量，表达式，编程语句，函数。</li><li>可以使用bc命令从shell提示符访问bc，quit退出bc:</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.06</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.95</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Copyright</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1991</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-1994, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1997</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1998</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2004</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2006</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Free Software Foundation, Inc.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is free software with ABSOLUTELY NO WARRANTY.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> details type \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warranty&#39;. </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.25*3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.75</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quit</span></span></code></pre></div><p><strong>在脚本中的用法</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用\`\`包裹</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># EOF结束时必须顶格写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scale=4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a=5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b=4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b/a</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF\`</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $var</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用echo和管道符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = \`echo &quot;scale=4;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$num1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$num2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; | bc\`</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $var</span></span></code></pre></div><h2 id="条件语句" tabindex="-1">条件语句 <a class="header-anchor" href="#条件语句" aria-label="Permalink to &quot;条件语句&quot;">​</a></h2><h3 id="case语句语法" tabindex="-1">case语句语法 <a class="header-anchor" href="#case语句语法" aria-label="Permalink to &quot;case语句语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pattern1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		;;　# 类似于传统的break;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pattern2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 相当于default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">esac</span></span></code></pre></div><h3 id="if语句语法" tabindex="-1">if语句语法 <a class="header-anchor" href="#if语句语法" aria-label="Permalink to &quot;if语句语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> condition</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #注意:shell中判断符\`==\`\`!=\`等的左右两边必须空格</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> condition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><h3 id="数值比较" tabindex="-1">数值比较 <a class="header-anchor" href="#数值比较" aria-label="Permalink to &quot;数值比较&quot;">​</a></h3><table><thead><tr><th>数值比较符</th><th>含义</th></tr></thead><tbody><tr><td><code>n1 -eq n2</code></td><td>n1和n2相等, 则返回true, 否则返回false</td></tr><tr><td><code>n1 -ne n2</code></td><td>n1和n2不相等, 则返回true, 否则返回false</td></tr><tr><td><code>n1 -gt n2</code></td><td>n1大于n2, 则返回true, 否则返回false</td></tr><tr><td><code>n1 -ge n2</code></td><td>n1大于等于n2, 则返回true, 否则返回false</td></tr><tr><td><code>n1 -lt n2</code></td><td>n1小于n2, 则返回true, 否则返回false</td></tr><tr><td><code>n1 -le n2</code></td><td>n1小于等于n2, 则返回true, 否则返回false</td></tr></tbody></table><h3 id="字符串比较" tabindex="-1">字符串比较 <a class="header-anchor" href="#字符串比较" aria-label="Permalink to &quot;字符串比较&quot;">​</a></h3><table><thead><tr><th>字符串比价</th><th>含义</th></tr></thead><tbody><tr><td><code>str1 = str2</code></td><td>想等比较</td></tr><tr><td><code>str1 != str2</code></td><td>不等比较</td></tr><tr><td><code>str1 &lt; str2</code></td><td>str1小于str2为true</td></tr><tr><td><code>str1 &gt; str2</code></td><td>str1大于str2为true</td></tr><tr><td><code>-n str1</code></td><td>str1长度不是0则为true</td></tr><tr><td><code>-z str1</code></td><td>str1长度为0则为true</td></tr></tbody></table><h3 id="文件比较" tabindex="-1">文件比较 <a class="header-anchor" href="#文件比较" aria-label="Permalink to &quot;文件比较&quot;">​</a></h3><table><thead><tr><th>文件比较</th><th>含义</th></tr></thead><tbody><tr><td><code>-d file</code></td><td>file是否为目录</td></tr><tr><td><code>-f file</code></td><td>file是否为文件</td></tr><tr><td><code>-e file</code></td><td>file是否存在</td></tr><tr><td><code>-r file</code></td><td>file是否可读</td></tr><tr><td><code>-w file</code></td><td>file是否可写</td></tr><tr><td><code>-x file</code></td><td>file是否可执行</td></tr><tr><td><code>-s file</code></td><td>file是否存在且非空</td></tr><tr><td><code>file1 -nt file2</code></td><td>file1比file2新, 则为true</td></tr><tr><td><code>file1 -ot file2</code></td><td>file1比file2旧, 则为true</td></tr></tbody></table><h2 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-label="Permalink to &quot;循环语句&quot;">​</a></h2><h3 id="for语句语法" tabindex="-1">for语句语法 <a class="header-anchor" href="#for语句语法" aria-label="Permalink to &quot;for语句语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p>**小技巧: **</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 遍历01~20, 2位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">01..20}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Number is </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># shell中空格和Tab默认分割, 可以通过IFS进行修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IFS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ZHANGSAN:LISI:WANGWU&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $list</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 读取命令的结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $FILE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /opt/$i ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is DIR&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /opt/$i ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is FILE&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ERROR&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h4 id="c语言风格" tabindex="-1">C语言风格 <a class="header-anchor" href="#c语言风格" aria-label="Permalink to &quot;C语言风格&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (( i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(( sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$i ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum</span></span></code></pre></div><h3 id="while语句语法" tabindex="-1">while语句语法 <a class="header-anchor" href="#while语句语法" aria-label="Permalink to &quot;while语句语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h3 id="until语句语法" tabindex="-1">until语句语法 <a class="header-anchor" href="#until语句语法" aria-label="Permalink to &quot;until语句语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><ol><li>使用return返回值的时候只能使用1~255的整数, 所以通常是用来返回状态的. 0表示成功, 1代表失败.</li><li>使用echo可以返回任何字符串结果, 通常用于返回数据, 比如一个字符串或者一个列表</li></ol><h3 id="函数库" tabindex="-1">函数库 <a class="header-anchor" href="#函数库" aria-label="Permalink to &quot;函数库&quot;">​</a></h3><ol><li>将经常使用的重复代码封装成函数文件</li><li>通过<code>. function</code>引入函数库(可能需要使用绝对路径)</li><li>库文件名的后缀是任意的, 但是一般使用<code>.lib</code></li><li>库文件通常没有可执行选项</li><li>库文件无需和脚本在同级目录, 只需在脚本中引用时指定</li><li>第一行一般使用<code>#!/bin/echo</code>, 输出警告信息, 避免用户执行</li></ol><h2 id="文件搜索" tabindex="-1">文件搜索 <a class="header-anchor" href="#文件搜索" aria-label="Permalink to &quot;文件搜索&quot;">​</a></h2><h3 id="find" tabindex="-1">find <a class="header-anchor" href="#find" aria-label="Permalink to &quot;find&quot;">​</a></h3><ol><li><p>语法格式<code>find [路径] [选项] [操作]</code>,可用 <code>.</code>代表当前目录</p></li><li><p>选项参数对照表</p></li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-name</code></td><td>根据文件名查找(例: 可以使用<code>*conf</code>搜索conf结尾的文件)</td></tr><tr><td><code>-iname</code></td><td>查找指定文件名的文件</td></tr><tr><td><code>-perm</code></td><td>根据文件权限查找</td></tr><tr><td><code>-prune</code></td><td>该选项可以排除某些查找目录</td></tr><tr><td><code>-user</code></td><td>根据文件属主查找</td></tr><tr><td><code>-group</code></td><td>根据文件属组查找</td></tr><tr><td><code>-mtime</code></td><td>根据文件更改时间查找</td></tr><tr><td><code>-nogroup</code></td><td>查找无有效属组的文件</td></tr><tr><td><code>-nouser</code></td><td>查找无有效属主的文件</td></tr><tr><td><code>-newer file1 ! file2</code></td><td>查找更改时间比file1新但比file2旧的文件</td></tr><tr><td><code>-type</code></td><td>按文件类型查找</td></tr><tr><td><code>-size</code></td><td>按文件大小查找</td></tr><tr><td><code>-mindepth n</code></td><td>从n级子目录开始搜索</td></tr><tr><td><code>-maxdepth n</code></td><td>最多搜索到n级子目录</td></tr><tr><td><code>-print</code></td><td>打印输出</td></tr><tr><td><code>-exec</code></td><td>对搜索到的文件执行特定的操作</td></tr><tr><td><code>-ok</code></td><td>和exec功能一样, 只是每次操作都会给用户提示, 要求选择yes/no</td></tr><tr><td><code>-a</code> <code>-o</code> <code>-not/!</code></td><td>与 或 非</td></tr></tbody></table><ol start="3"><li><p>选项补充</p><ol><li><p>-type</p><ul><li>f 文件 <code>find . -type f</code></li><li>d 目录 <code>find . -type d</code></li><li>c 字符设备文件 <code>find . -type c</code></li><li>b 块设备文件 <code>find . -type b</code></li><li>l 链接文件 <code>find . -type l</code></li><li>p 管道文件 <code>find . -type p</code></li></ul></li><li><p>-size</p><ul><li>-n 大小小于n的文件 <code>find /etc -size -1M</code></li><li>+n 大小大于n的文件 <code>find /etc -size +1M</code></li></ul></li><li><p>-mtime</p><ul><li>-n n天以内修改的文件 <code>find /etc -mtime -3</code></li><li>+n n天以外修改的文件 <code>find /etc -mtime +3</code></li><li>n n天前(时间点)修改的文件</li></ul></li><li><p>-mmin 多少分钟前修改的文件, 可用<code>+n / -n</code>指定</p></li><li><p>-prune</p><p>通常和-path一起使用, 用于将特定目录排除在搜索条件之外</p><ol><li><p>搜索当前目录下所有普通文件, 但排除test目录</p><p><code>find . -path ./etc -prune -o -type f</code></p></li><li><p>查找当前目录下所有普通文件, 但排除etc和opt目录</p><p><code>find . -path ./etc -prune -o -path ./opt -prune -o -type f</code></p></li><li><p>查找当前目录下所有普通文件, 但排除etc和opt目录, 但属主为hdfs</p><p><code>find . -path ./etc -prune -o -path ./opt -prune -o -type f -a -user hdfs</code></p></li><li><p>查找当前目录下所有普通文件, 但排除etc和opt目录, 但属主为hdfs, 且文件大小必须大于字符</p><p><code>find . -path ./etc -prune -o -path ./opt -prune -o -type f -a -user hdfs -a -size +500c</code></p></li></ol></li><li><p>-exec</p><ol><li><p>格式为<code>-exec &#39;command&#39; {} \\;</code></p></li><li><p>例:</p><ul><li><p>搜索/etc下的文件(非目录), 文件名以conf结尾, 且大于10k, 然后将其删除</p><p><code>find ./etc/ -type f -name &#39;*.conf&#39; -size +10k -exec rm -f {} \\;</code></p></li><li><p>将/var/log/目录下以log结尾的文件, 且更改时间在7天以上的删除</p><p><code>find /var/log/ -name &#39;*.log&#39; -mtime +7 -exec rm -rf {} \\;</code></p></li><li><p>搜索条件和例1相同, 但时不删除, 而是复制到/root/conf目录下</p><p><code>find ./etc/ -size +10k -type f -name &#39;*.conf&#39; -exec cp {} /root/conf/ \\;</code></p></li></ul></li></ol></li></ol></li></ol><h3 id="locate、whereis和which" tabindex="-1">locate、whereis和which <a class="header-anchor" href="#locate、whereis和which" aria-label="Permalink to &quot;locate、whereis和which&quot;">​</a></h3><h4 id="locate" tabindex="-1">locate <a class="header-anchor" href="#locate" aria-label="Permalink to &quot;locate&quot;">​</a></h4><ol><li>文件查找命令, 所属软件包mlocate</li><li>不同于find命令时在整块磁盘中搜索, locate命令在数据库文件中查找</li><li>find时默认全部匹配(精确匹配), locate则是默认部分匹配(模糊匹配)</li><li>updatedb: 更新数据库文件 <ul><li>用户更新/var/lib/mlocate/mlocate.db</li><li>所使用配置文件/etc/updatedb.conf</li><li>该命令在后台cron计划任务重定期执行</li></ul></li></ol><h3 id="whereis" tabindex="-1">whereis <a class="header-anchor" href="#whereis" aria-label="Permalink to &quot;whereis&quot;">​</a></h3><p>用于搜索二进制文件、二进制程序文档、源代码文件</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>只返回二进制文件</td></tr><tr><td>-m</td><td>只返回帮助文档文件</td></tr><tr><td>-s</td><td>只返回源代码文件</td></tr></tbody></table><h4 id="which" tabindex="-1">which <a class="header-anchor" href="#which" aria-label="Permalink to &quot;which&quot;">​</a></h4><p>仅查找二进制程序文件</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>只返回二进制文件</td></tr></tbody></table><h4 id="各命令使用场景辨析" tabindex="-1">各命令使用场景辨析 <a class="header-anchor" href="#各命令使用场景辨析" aria-label="Permalink to &quot;各命令使用场景辨析&quot;">​</a></h4><table><thead><tr><th>命令</th><th>适用场景</th><th>优缺点</th></tr></thead><tbody><tr><td>find</td><td>查找某一类文件, 或许要复杂操作</td><td>功能强大, 速度慢</td></tr><tr><td>locate</td><td>只能查找单个文件</td><td>功能单一, 速度快</td></tr><tr><td>whereis</td><td>查找程序的可执行文件、帮助文档等</td><td>不常用</td></tr><tr><td>which</td><td>只查找程序的可执行文件</td><td>常用于查找程序的绝对路径</td></tr></tbody></table><h2 id="文本处理" tabindex="-1">文本处理 <a class="header-anchor" href="#文本处理" aria-label="Permalink to &quot;文本处理&quot;">​</a></h2><h3 id="grep和egrep" tabindex="-1">grep和egrep <a class="header-anchor" href="#grep和egrep" aria-label="Permalink to &quot;grep和egrep&quot;">​</a></h3><h4 id="grep语法格式" tabindex="-1">grep语法格式 <a class="header-anchor" href="#grep语法格式" aria-label="Permalink to &quot;grep语法格式&quot;">​</a></h4><ol><li><p><code>grep [option][pattern][file1,file2...]</code></p></li><li><p><code>command | grep [option][pattern]</code></p></li><li><p>grep参数</p></li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-v</td><td>不显示匹配行信息</td></tr><tr><td>-i</td><td>搜索时忽略大小写</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-r</td><td>递归搜索</td></tr><tr><td>-E</td><td>支持扩展正则表达式</td></tr><tr><td>-F</td><td>不按正则表达式匹配, 按照字符串字面意思匹配</td></tr><tr><td>-c</td><td>只显示匹配行总数</td></tr><tr><td>-w</td><td>匹配整词</td></tr><tr><td>-x</td><td>匹配整行</td></tr><tr><td>-l</td><td>只显示文件名, 不显示内容</td></tr><tr><td>-s</td><td>不显示错误信息</td></tr></tbody></table><h3 id="sed" tabindex="-1">sed <a class="header-anchor" href="#sed" aria-label="Permalink to &quot;sed&quot;">​</a></h3><ol><li>sed(Stream Editor), 流编辑器. 对标准输出或文件逐行进行处理.</li><li>语法: <ol><li><code>stdout | sed [option] &quot;pattern command&quot;</code></li><li><code>sed [option] &quot;pattern command&quot; file</code></li></ol></li><li>sed的选项</li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-n</code></td><td>只打印模式匹配行</td></tr><tr><td><code>-e</code></td><td>直接在命令行进行sed编辑, 默认选项</td></tr><tr><td><code>-f</code></td><td>编辑动作保存在文件中, 指定文件执行</td></tr><tr><td><code>-r</code></td><td>支持扩展正则表达式</td></tr><tr><td><code>-i</code></td><td>直接修改文件内容</td></tr></tbody></table><p>例: <code>sed -n -e &#39;/python/p&#39; -e &#39;PYTHON/p&#39; sed.txt</code></p><p>​ <code>sed -n -r &#39;/python|PYTHON/p&#39; sed.txt</code></p><p>​ <code>sed -i &#39;s/love/like/g&#39; sed.txt</code></p><ol start="4"><li>pattern用法表</li></ol><table><thead><tr><th>匹配模式</th><th>含义</th></tr></thead><tbody><tr><td>10command</td><td>匹配到第10行</td></tr><tr><td>10, 20command</td><td>匹配到第10行开始, 到第20行结束</td></tr><tr><td>10, +5command</td><td>匹配从第10行开始, 到第16行结束</td></tr><tr><td>/pattern1/command</td><td>匹配到pattern1的行</td></tr><tr><td>/pattern1/,/pattern2/command</td><td>匹配到pattern1的行开始, 到匹配到pattern2的行结束</td></tr><tr><td>10, /pattern1/command</td><td>匹配从第10行开始, 到匹配到pettern1的行结束</td></tr><tr><td>/pattern1/, 10command</td><td>匹配到pattern1的行开始, 到第10行匹配结束</td></tr></tbody></table><ol start="5"><li>编辑命令对照表</li></ol><table><thead><tr><th>类别</th><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>查询</td><td>p</td><td>打印</td></tr><tr><td>增加</td><td>a</td><td>匹配到行后追加内容</td></tr><tr><td>增加</td><td>i</td><td>匹配到行前追加追加内容</td></tr><tr><td>增加</td><td>r</td><td>外部文件读入, 行后追加</td></tr><tr><td>增加</td><td>w</td><td>匹配行写入外部文件</td></tr><tr><td>删除</td><td>d</td><td>删除</td></tr><tr><td>修改</td><td>s/old/new</td><td>将行内第一个old替换为new</td></tr><tr><td>修改</td><td>s/old/new/g</td><td>将行内全部的old替换为new</td></tr><tr><td>修改</td><td>s/old/new/2g</td><td>将行内前2个old替换为new</td></tr><tr><td>修改</td><td>s/old/new/ig</td><td>将行内old全部替换为new, 忽略大小写</td></tr></tbody></table><p>例: <code>sed -i &#39;s/had..p/&amp;s/g&#39; file</code>, <code>&amp;</code>表示反向引用, 可以修改满足某种形式的内容</p><p>​ <code>sed -i &#39;s/\\(had..p\\)/\\1O/g&#39; file</code>, <code>\\1</code>也代表反向引用, 但是相比于<code>&amp;</code>, <code>\\1</code>可以通过前面的括号, 控制替换的部分(括号内不变)</p><p><strong>注意事项:</strong> 有变量时, 使用双引号, 或者每个变量都用单引号括起来. <code>=</code>可以显示行号.</p><h3 id="awk" tabindex="-1">awk <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;awk&quot;">​</a></h3><p>awk是一个文本处理工具, 通常用于处理数据并生成结果报告</p><h4 id="语法格式" tabindex="-1">语法格式 <a class="header-anchor" href="#语法格式" aria-label="Permalink to &quot;语法格式&quot;">​</a></h4><ol><li><p>第一种形式: <code>awk &#39;BEGIN{}pattern{commands}END{}&#39; file_name</code></p><table><thead><tr><th>语法格式</th><th>解释</th></tr></thead><tbody><tr><td><code>BEGIN{}</code></td><td>正式处理数据之前执行</td></tr><tr><td><code>pattern</code></td><td>匹配模式</td></tr><tr><td><code>{commands}</code></td><td>处理命令, 可能多行</td></tr><tr><td><code>END{}</code></td><td>处理完所有匹配数据后执行</td></tr></tbody></table></li><li><p>第二种形式: <code>standard output | awk &#39;BEGIN{}pattern{commands}END{}&#39;</code></p></li></ol><h4 id="内置变量" tabindex="-1">内置变量 <a class="header-anchor" href="#内置变量" aria-label="Permalink to &quot;内置变量&quot;">​</a></h4><p>内置变量对照表</p><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>整行内容</td></tr><tr><td>$1 - $n</td><td>行的第1道n个字段的信息</td></tr><tr><td>NF</td><td>当前行的字段个数, 也就是有多少列</td></tr><tr><td>NR</td><td>处理行的行号</td></tr><tr><td>FNR</td><td>多文件处理时, 每个文件单独记录的行号</td></tr><tr><td>FS</td><td>输入字段分隔符, 默认空格或tab键分割</td></tr><tr><td>RS</td><td>输入行分隔符, 默认回车换行</td></tr><tr><td>OFS</td><td>输出字段分隔符, 默认为空格分割</td></tr><tr><td>ORS</td><td>输出行分隔符, 默认为回车换行</td></tr><tr><td>FILENAME</td><td>当前输入的文件名</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr></tbody></table><h4 id="格式化输出" tabindex="-1">格式化输出 <a class="header-anchor" href="#格式化输出" aria-label="Permalink to &quot;格式化输出&quot;">​</a></h4><p>printf: <code>-</code>左对齐, <code>+</code>右对齐</p><p>例: <code>awk &#39;BEGIN{FS=&quot;:&quot;}{printf &quot;-20s %-20s\\n&quot;, $1, $7}&#39; /etc/passwd</code></p><h4 id="条件及循环语句" tabindex="-1">条件及循环语句 <a class="header-anchor" href="#条件及循环语句" aria-label="Permalink to &quot;条件及循环语句&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># if</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN{FS=&#39;:&#39;}{if($3&gt;50 &amp;&amp; $3&lt;100) printf&quot;%-20%-25%-5d\\n&quot;,&quot;大于50小于100的UID&quot;,$1,$2}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/passwd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># do while</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN{ </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test=100;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">total=0;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">while(i&lt;=test)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    total+=i;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    i++;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print total;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;BEGIN{ </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">total=0;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for(i=0;i&lt;=100;i++)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    total+=i;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print total;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span></span></code></pre></div><h4 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-label="Permalink to &quot;字符串操作&quot;">​</a></h4><table><thead><tr><th>函数名</th><th>解释</th><th>函数返回值</th></tr></thead><tbody><tr><td><code>length(str)</code></td><td>计算字符串长度</td><td>整数长度值</td></tr><tr><td><code>index(str1,str2)</code></td><td>在str1中查找str2的位置</td><td>索引位置, 从1计数</td></tr><tr><td><code>tolower(str)</code></td><td>转换为小写</td><td>转换后的小写字符串</td></tr><tr><td><code>toupper(str)</code></td><td>转换为大写</td><td>转换后的大写字符串</td></tr><tr><td><code>substr(str,m,n)</code></td><td>从str的m个字符开始, 截取n位</td><td>截取后的子串</td></tr><tr><td><code>split(str,arr,fs)</code></td><td>按fs切割字符串, 结果保存arr</td><td>切割后的子串的个数</td></tr><tr><td><code>match(str,RE)</code></td><td>在str中按照RE查找, 返回位置</td><td>返回索引位置</td></tr></tbody></table><h4 id="条件选项" tabindex="-1">条件选项 <a class="header-anchor" href="#条件选项" aria-label="Permalink to &quot;条件选项&quot;">​</a></h4><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-v</td><td>参数传递</td></tr><tr><td>-f</td><td>指定脚本文件执行</td></tr><tr><td>-F</td><td>指定分隔符</td></tr><tr><td>-V</td><td>查看awk的版本号</td></tr></tbody></table><p>例: <br><code>awk -v num2=$num1 -v var1=&quot;$var&quot; &#39;BEGIN{print num2,var1}&#39; </code><br><code>awk -v num2=$num1 -v var1=&quot;$var&quot; -f file </code></p><h4 id="数组的用法" tabindex="-1">数组的用法 <a class="header-anchor" href="#数组的用法" aria-label="Permalink to &quot;数组的用法&quot;">​</a></h4><ol><li>打印元素: <code>echo \${array[2]}</code></li><li>打印元素个数: <code>echo \${#array[@]}</code></li><li>打印元素长度: <code>echo \${#array[3]}</code></li><li>给元素赋值: <code>array[3]=&quot;Li&quot;</code></li><li>删除元素: <code>unset array[2]; unset array</code></li><li>分片访问: <code>echo \${array[@]:1:3}</code></li><li>元素内容替换: <br><code>\${array[@]/e/E}</code> 只替换第一个e <br><code>{array[@]//e/E}</code> 替换所有的e</li><li>遍历:</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><p><strong>注:</strong> 在awk中, 数组下标不仅可以使用1、2、3......, 还可以使用字符串作为数组下标</p>`,145),l=[d];function n(h,r,p,o,k,c){return i(),s("div",null,l)}const F=t(e,[["render",n]]);export{y as __pageData,F as default};
